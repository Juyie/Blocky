using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.XR.Interaction.Toolkit;
using UnityEngine.InputSystem;
using Photon.Pun;
using Photon.Pun.UtilityScripts;
using Photon.Realtime;

public class LineManager : MonoBehaviour
{
    // line?? prefab?? clone???? ?????? ???????? ????????.
    [SerializeField]
    private GameObject linePref;

    // line?? material
    [SerializeField]
    private Material blackMtl;

    // ???????? input???? ???????? ???? ????
    [SerializeField]
    private InputActionReference rightTriggerReference;

    [SerializeField]
    private InputActionReference leftTriggerReference;

    [SerializeField]
    private InputActionReference rightGripReference;

    [SerializeField]
    private InputActionReference leftGripReference;

    // start object?? end object?? ???????? ???? ????
    private GameObject startObject = null;
    private GameObject endObject = null;

    // ?????? line?? ???????? ???? ????
    private GameObject line;

    // ???? ?????????? ???????? ???? object?? ???????? ???? ???????? ????
    public void ResetObject()
    {
        startObject = null;
        endObject = null;
    }

    // ???? ?????? ???? ???????? ????
    public void CreateLine(GameObject blockObj)
    {
        // ?????? ?????? ???? ???????? ?????? ?? ?????????? ?????? ??????.
        // ?????? ?????? ?????? ?????? ???????? ???? ???????? ?????? ??????.
        if (rightTriggerReference.action.ReadValue<float>() > 0.0f && rightGripReference.action.ReadValue<float>() == 0.0f && startObject == null)
        {
            // ?????? ?????? ?????????? ?????????? ?????? endObject???? ???????? object?? ???? ????????.
            startObject = blockObj;
            endObject = GameObject.Find("RightFront");

            // prefab?? ???????? ?????? ??????????.
            line = PhotonNetwork.Instantiate(this.linePref.name, new Vector3(0, 0, 0), Quaternion.identity);

            // line?? ?????? ???????? ???? component?? LineRenderer?? lr?? ????????.
            // ?????? ???? material, ???? ???? ????????.
            LineRenderer lr = line.GetComponent<LineRenderer>();

            // ???? ???????? ???? startObject?? endObject???? position?? ?????? ????????.
            // ?????? lr?? position?? ???? ????????.
            Vector3 startPos = startObject.transform.position;
            Vector3 endPos = endObject.transform.position;
            lr.SetPosition(0, startPos);
            lr.SetPosition(1, endPos);

            // line?? ???????? ???? component?? Line?? ????????
            // ?????? ???????? startObject, endObject, LineManager?? ????????.
            line.GetComponent<Line>().SetStartObject(startObject);
            line.GetComponent<Line>().SetEndObject(endObject);
            line.GetComponent<Line>().lineManager = gameObject.GetComponent<LineManager>();
        }
        // ?????? ?????????? ??????????.
        if (leftTriggerReference.action.ReadValue<float>() > 0.0f && leftGripReference.action.ReadValue<float>() == 0.0f && startObject == null)
        {
            startObject = blockObj;
            endObject = GameObject.Find("LeftFront");

            line = PhotonNetwork.Instantiate(this.linePref.name, new Vector3(0,0,0), Quaternion.identity);

            LineRenderer lr = line.GetComponent<LineRenderer>();

            Vector3 startPos = startObject.transform.position;
            Vector3 endPos = endObject.transform.position;
            lr.SetPosition(0, startPos);
            lr.SetPosition(1, endPos);

            line.GetComponent<Line>().SetStartObject(startObject);
            line.GetComponent<Line>().SetEndObject(endObject);
            line.GetComponent<Line>().lineManager = gameObject.GetComponent<LineManager>();
        }
        // ?????? ?????? ?????? ????
        if ((rightTriggerReference.action.ReadValue<float>() > 0.0f && rightGripReference.action.ReadValue<float>() == 0.0f)
            || (leftTriggerReference.action.ReadValue<float>() > 0.0f && leftGripReference.action.ReadValue<float>() == 0.0f) 
            && startObject != null && blockObj != startObject)
        {
            endObject = blockObj;
            line.GetComponent<Line>().SetEndObject(endObject);

            // collider ?????? ?????? ??????????.
            BoxCollider collider = line.GetComponent<BoxCollider>();
            // ???? ???? ????
            float startVectorX = endObject.transform.position.x - startObject.transform.position.x;
            float startVectorY = endObject.transform.position.y - startObject.transform.position.y;
            float startVectorZ = endObject.transform.position.z - startObject.transform.position.z;
            Vector3 startNormal = new Vector3(startVectorX, startVectorY, startVectorZ).normalized;
            Vector3 endNormal = new Vector3(-startNormal.x, -startNormal.y, -startNormal.z);
            // ???????? ???? ???? ????
            Vector3 startSurface = startObject.transform.position + startNormal * startObject.transform.localScale.x;
            Vector3 endSurface = endObject.transform.position + endNormal * endObject.transform.localScale.x;
            // ???? ???? ????
            Vector3 colliderCenter = (startSurface + endSurface) / 2;
            collider.center = colliderCenter;
            // ???? ????
            float lenX = Mathf.Abs(startObject.transform.position.x - endObject.transform.position.x) / 10;
            float lenY = Mathf.Abs(startObject.transform.position.y - endObject.transform.position.y) / 10;
            float lenZ = Mathf.Abs(startObject.transform.position.z - endObject.transform.position.z) / 2;
            collider.size = new Vector3(lenX, lenY, lenZ);

            line = null;
            startObject = null;
            endObject = null;
        }
    }
}
